to look for the meaning of any option in the manual:
/[pattern]
(if you are looking for a word you can enter spaces before or after the word, so you will get the exact word)

(to look manual about the manual):
man man

(to specify the section you want to look for, eg. in this case, we want to look for the command passwd in section 1):
man 1 passwd

in Windows, the root directory is not the top directory (you have the C drive, etc.), but in true-unix or unix-like systems, the root directory is the top directory.

in root directory, we find the following folders:
bin: executable programs (eg. 'pwd'...)
etc: configuration files and initialization scripts (you can configure cron jobs, the nano text editor, etc.)
media: where we access removable media (usb drives, sd cards, dvds, cd roms, etc.)
var: files that have to do with login info (generated log files in the 'syslog' file), outputs of other programs, caches, etc.
root (not to confuse with the top root directory): this is the home folder of the user called 'root'. if you are not the root or super user, you won't have persmission to access.
usr: different libraries, executable files, programs, if you install software, new commands, etc. it will end up in this folder.

you can specify the path were you want a file to be created, for example:
touch ../<filename>
touch ~/<filename>

if you 'touch' an existing file, it changes the access and modification date, but it does not modify the contents of the file.

if you check 'filename' in wikipedia, you will see all the symbols that have meaning to the shell, therefore you should not use them when naming files (eg. spaces, interrogation symbol, etc.).

backslash '\' is an escape character: it tells the shell that whatever comes after it, should not have any special meaning, it should be treated as plain text.

when you are creating a directory, if you want to create parent directories as well:
mkdir -p horses/stallions

ls -R 
(it prints recursively the contents of the directories inside of the pwd)

if you want to explore nano, you can 'man nano'
if you want to save what you edit in nano, you use the Write Out shortcut (control o) (by the way, you don't need to type capital letters in the shortcuts with nano). you can also use control S to save (but in this case, it will save in the existing file, without asking you if you want to change the name of the file)
if you 'nano <filename>' and the file does not exist yet, it creates it when you save it
if you type control g (get help), you will see all the shortcuts in nano: if you explore the shortcuts in Nano, keep in mind that the nomenclature is old, for example, 'M' means meta key, which references a key in older computers. In current Macs, that is ESC. The same happens with other shortcuts.
to edit the nano config file, you need sudo permissions: 'sudo nano /etc/nanorc'. then you only need to remove the # symbol of the setting that you want to activate.

rm -i (interactive: it asks you every time before a file gets deleted)

mv dog.txt /Desktop/dogs/newdog.txt (here we are moving and renaming at the same time)

cp -r oldFolder newFolder (here we are copying directories recursively) 

(to know the number of commands you have in history):
echo $HISTSIZE

with 'less', you can search for terms using '/<term>', as we did when we are using 'cat'

tail -f <filename> (it 'follows' the file, it listens to the file, so if new content appears on the file, it will print it immediately)
(this is useful if you are monitoring logs)

//

you can redirect to a file that already exists or otherwise it will create it. 
when you redirect, it re-writes the file (it deletes what it was written before)

IF YOU WANT TO APPEND ERRORS:
cat nonexistingfile 2>> errors.txt

if you are redirecting standard output and standard error in the same line, you need to redirect standard output before the standard error.

the 'tr' command requires data as standard input. for example
cat file.txt | tr a A
(this substitutes 'a' for 'A')

//

echo *
(this will print all the files of the pwd, so we can also do the following):
echo *.js
(the former will give you all the files of the pwd that end in '.js')

echo ~
(this will expand into my home directory path, for example):
home/myname

echo ~kitty
(this will print the path of the home directory for the user kitty, for example):
home/kitty

echo {Mon,Tue}-plan.txt
(even though you don't have the following files yet, the 'echo' command will show you what would be produced):
Mon-plan.txt Tue-plan.txt
echo {Mon,Tue}-{Am,Pm}-plan.txt
(the above will give you every possible combination)

mkdir -p {Mon,Tue}/{Breakfast,Lunch,Dinner}
(this will create Breakfast, Lunch, and Dinner folders inside the Mon and Tue folders (to create folders inside of the folders we use '-p'))

alternative syntax for command subsitution:
echo today is `date`

//

the 'sudo updatedb' command will update the database that 'locate' uses. 