watch again video of all devops tools fiting together
watch again all marked videos.

echo $SHELL 
($ is for environment variables)

cd new-directory; mkdir www; pwd
(to run multiple commands, use ;)

mkdir -p /asia/india/bangalore

rm -r /asia

cp -r /asia/india /asia/china

cat > file.txt
(now you can write in the file)

cat file.txt
(now you can read the content of the file)

(to write in a file):
echo 'hello there' >> file.txt

cp file.txt /asia/india
(copy a file to a directory, keepeing the same name)

cp file.txt /asia/india/new-file.txt
(copy and rename)

cp file.txt /asia/india
(copy and keep the same name)

mv file.txt /asia/india/new-file.txt
(to move a file, like cut and paste)

mv file.txt new-name.txt
(to rename a file, in reality, it's moving to the same path)

rm new-name.txt

//

vi index.html
(you are in command mode, where you can do anything (copy, paste, delete lines, etc.) but not write code).

if you press 'i', then you are in insert mode, then you can modify contents.
press 'esc' to go back from insert mode to command mode.

command mode:
move around with the arrows of your keyboard
delete letter with 'x', delete line with 'dd'
copy with 'yy' and paste with 'p'
scroll up and down: CRTL+u, CTRL+d

to be able to type commands, you press ':', as follows:
to save: ':w', or ':w filename'
to quit, without saving: ':q'
to quit, saving: ':wq'
to find the word 'of' in the file: '/of', then all the instances of the word will be hightlighted, and then press 'n' to move to the next instance of the word

current user: 'whoami'
current user id: 'id'
switch user: 'su anotherusername' (it will prompt you to enter the password)
to access another system remotely with another username using ssh, you enter username and the host name: 'ssh anotherusername@192.333.2.2'

//

regular users cannot access the '/root' directory and perform certain operations (delete files, install software, services, etc.), only root users can do that.
root users can give sudo priviledges to regular users, by including them in the '/etc/sudoers' directory, so they will be able to perform these operations by adding the 'sudo' prefix to the commands.

//

curl http://www.some-file.com/some-file.txt -O
(to download files from the internet, you add '-O' to save file, otherwise it will print it on the screen)
(another command to do the same):
wget http://www.some-file.com/some-file.txt -O some-file.txt

ls /etc/*release*
cat /etc/*release*
(to check the OS of your linux system, you can inspect the release files. they have different names, that's why you use the wildcard *. when you print them, you will see the name of the OS anywhere)

//

centOS uses RPM (Red Hat Package Manager) (the same as RH Enterprise Linux or Fedora).
other operative systems like Red Hat Enterprise Linux or Fedora do the same.

rpm -i telnet.rpm
(to install a package)
rpm -e telnet.rpm
(to uninstall a package)
rpm -q telnet.rpm
(to query a package)

but the former commands will not install dependencies, such as programming languages needed to run these packages.
that's why we use package managers like YUM (high level package manager that uses RPM underneath), for example:
yum install ansible
(this will install not only ansible but also all its dependencies in the right order. to do that, yum searches many remote repos that act as software warehouses. these can be in your local, in private servers, or in the internet)

in '/etc/yum.repos.d', you have the info about the remote repositories that contain the software that you may need to install (all operating systems come with this file about repos). it might happen that the software or version that you need is not in the repos of that file, so you may need to update it with new repos.
yum repolist
(to see the repos available)
ls /etc/yum.repos.d/
(to see the files where the repos are configured)
(if you go inside of any of these files, you will see the url of the repo where the package is hosted):
cat /etc/yum.repos.d/CentOS-Base.repolist
(to see info about installed packages, or to check whether or not a package is installed):
yum list [package-name]
(just 'yum list' will display all packages, which is a lot!)
(to remove an installed package):
yum remove [package-name]
(to list all available versions of a package):
yum --showduplicates list [package-name]
(to install a version of a package):
yum install ansible-2.4.2.1

//

In linux, a service (or daemon) is a script that runs in the background. It listens continuously for incoming requests and sends a response based on the given request. A service is different from a process as a process is an application or a script that can be running in the foreground or the background.
when you install a software that must continue running even when the system is rebooted, or when re-started, needs to do start depending softwares in the right order, eg. a web server, a database server, or devops tools such as docker, etc., they are authomatically configured as services on the system.
(to start a service, for example, the Httpd service (an apache web server)):
service httpd start
(but the former command uses underneath the following one, for the same purposes):
systemctl start httpd
systemctl stop httpd
systemctl status httpd
systemctl enable httpd (to start a service upon reboot of the system)
systemctl disable httpd (not to start a service upon reboot of the system)

how do you configure your program as a service (so you can run the above commands when you need to, without worrying about paths, arguments, etc.)?
the systemctl command line utility is used to manage the system d services. therefore, we must configure our program as a system d service, by creating a system d unit file. these files are located at /etc/systemd/system. you can read this file by: systemctl cat [appname].service
therefore, you create a file with the name that you want the service to be known as, with an extension '.service'.
Therefore, we create the file 'my_app.service', and inside the file, we write a service section with an ExecStart directive with the command to start the app, as follows:
[Service]
ExecStart=/usr/bin/python3 /opt/code/my_app.py
(then we let the system know that we have a new service):
systemctl daemon-reload
(now we can start our app):
systemctl start my_app
(we can check in the status that our app is active):
systemctl status my_app
(we can visit our app):
curl http://localhost:5000
(and we can stop our app):
systemctl stop my_app

how to configure the service to run automatically upon system bootup?
in the unit configuration file (aka service configuration file, or Service Unit File), we add an Install section, as follows:
(in this section, we configure our service to run right after a service (multi-user.target) that runs at bootup):
[Install]
WantedBy=multi-user.target
(and then):
systemctl enable my_app

(to add metadata to our service):
[Unit]  
Description=My python web application

(to execute dependent scripts before or after our app runs):
[Service]
ExecStart=/usr/bin/python3 /opt/code/my_app.py
ExecStartPre:/opt/code/configure_db.sh
ExecStartPost:/opt/code/email_status.sh

(to re-start the app automatically if system crashes):
[Service]
ExecStart=/usr/bin/python3 /opt/code/my_app.py
ExecStartPre:/opt/code/configure_db.sh
ExecStartPost:/opt/code/email_status.sh
Restart:always

//

(to remove a file from staging area):
git rm notes.txt
(to make git ignore a file permanently, so it will not be listed at all):
echo "notes.txt" >> .gitignore
You can list the changed files as well using the --name-only option with the git log command
(to get help on a specific command):
git help [command]
git log --graph --decorate to see previous commit history along with the branch they were committed on.

//

YAML:

variables:
Fruit: banana

arrays/lists:
Fruits: 
    - banana
    - apple

objects/dictionaries:
Banana: 
    calories: 105
    fat: 11

# any line that start with a hash, is ignored, and considered a comment

//

ANSIBLE:

Labs - FAQ
If you are following along the demo to setup lab, please refer to the below troubleshooting tips:

Only 32bit VMs are listed in Virtual Box
While creating VMs in Virtual box if only 32 bit vms are listed, kindly check on the following:

Check if Virtualization is enabled on your system. For this you must access the BIOS of your laptop and enable Virtualization if its not already enabled.

Check if Hyper-V is enabled on your system. If it is, ensure that it is disabled as two virtualization technologies cannot co-exist.

Issues installing Ansible and its dependencies
Once the Debian VM is up and running make the following changes to the /etc/apt/sources.list file to get the Ansible installation working right.

Comment the line starting deb cdrom

Uncomment bottom two lines starting deb and deb-src

Add the below two lines:

deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main
deb http://ftp.de.debian.org/debian sid main
Final file:

#
# deb cdrom:[Debian GNU/Linux 8.9.0 _Jessie_ - Official amd64 DVD Binary-1 20170723-11:49]/ jessie contrib main
#deb cdrom:[Debian GNU/Linux 8.9.0 _Jessie_ - Official amd64 DVD Binary-1 20170723-11:49]/ jessie contrib main
#deb http://deb/debian.org/debian jessie main
#deb-src http://deb.debian.org/debian stretch main
deb http://security.debian.org/ jessie/updates main contrib
deb-src http://security.debian.org/ jessie/updates main contrib
# jessie-updates, previously known as 'volatile'
# A network mirror was not selected during install.  The following entries
# are provided as examples, but you should amend them as appropriate
# for your mirror of choice.
#
deb http://ftp.debian.org/debian/ jessie-updates main contrib
deb-src http://ftp.debian.org/debian/ jessie-updates main contrib
deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main
deb http://ftp.de.debian.org/debian sid main
Once file is updated, run apt-get update and then run apt-get install ansible

Enabling SSH on the VM
If you need SSH enabled on the system, follow the below steps:

Ensure the /etc/apt/sources.list file has been updated as per above

Run the command: apt-get update 

Run the command: apt-get install openssh-server

Run the command: service sshd start

FAQ
I can not see the 64 bit versions of Operating Systems listed in Oracle VirtualBox

Make sure you have Virtualization Feature Enabled on your laptop.

I can not see the 64 bit versions even though virtualization is enabled 

Turn off Hyper-V, in  "Turn Windows Features on or off" in control panel 

//

web ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=jjljsg@
web ansible_host=server2.company.com ansible_connection=winrm ansible_user=admin ansible_password=Password123! 
localhost ansible_connetion=localhost

//

# Sample Inventory File

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!

[web_servers]
web1
web2
web3

[db_servers]
db1

[all_servers:children]
web_servers
db_servers

// 

(to access a remote machine):
ssh 103.444.3.222
(to exit from that remote machine):
exit
mkdir test-project
cd test-project
cat > inventory.txt
target1 ansible_host=103.444.3.222 ansible_ssh_pass=pass123!
(now we do a ping test, to test that you can connect to the target machine):
ansible target1 -m ping -i inventory.txt

//

(how to run a playbook):
ansible-playbook playbook.yml
(info about additional parameters available for the former command):
ansible-playbook --help
(info about modules):
ansible-doc -l

//

if you want to do one-off things with ansible (such as ping tests, reboot all hosts, execute just one command, etc.), you can use an imperative approach, by using commands, for example:
ansible [hosts] -a [command]
(automatically, ansible creates the 'all' group, encompassing all hosts):
ansible all -a '/sbin/reboot'
(when you want to use a module, you use the '-m' parameter):
ansible [hosts] -m [module]
(when you want to refer to the inventory file, you use the '-i' parameter):
ansible all -m ping -i inventory.txt

but ususally, we use the declarative approach by executing ansible playbooks that will contain all that we want to execute:
ansible-playbook [playbook name].yml -i inventory.txt

in the example, of our playbook in this folder:
ansible-playbook -i inventory playbook-pingtest.yaml 

//

You can use 'ansible-doc' command to see the information about Ansible modules from command line.